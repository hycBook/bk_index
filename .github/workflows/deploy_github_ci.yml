# This is a basic workflow to help you get started with Actions

name: book index github

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build_env_hyc"
  build_env_hyc:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # install nodejs env
      - name: install nodejs
        uses: actions/setup-node@v1
        with: 
          node-version: '12.16.1'
      
      # configue gitbook
      - name: configue gitbook
        run: |
          echo 开始拉取nodejs插件
          git clone https://github.com/narutohyc/node_modules_mathjax.git
          cp -r ./node_modules_mathjax/node_modules .
          npm install -g gitbook-cli
          gitbook install
          # npm install -g gitbook-summary

      - name: export pdf ebook
        run: |
          # 安装calibre，生成电子书
          echo 安装calibre...
          sudo mkdir /usr/share/desktop-directories/
          npm install svgexport -g
          sudo -v && wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin
          sudo ln -s /usr/bin/nodejs /usr/bin/node
          echo 安装calibre完成
          mkdir -p /usr/share/fonts/truetype
          cp -r ./node_modules_mathjax/fonts/* /usr/share/fonts/truetype

      # generate _book folder
      - name: generate_book_folder
        run: |
          gitbook build
          echo 开始生成epub电子书...
          gitbook epub ./ bk_index.epub
          echo 生成epub电子书完成
          mkdir _ebook
          cp bk_index.epub _ebook/
          echo pdf电子书复制完成
          cp ./node_modules_mathjax/py_scripts/gen_sup_idx.py .
          pip install BeautifulSoup4
          pip install lxml
          python -u gen_sup_idx.py
          echo 生成辅助索引完成
          rm -rf _book/docs/*
          echo 删除多余格式文件完成
          cp ./node_modules_mathjax/styles/style.css _book/gitbook/style.css
          echo style.css文件替换完成
          # 更新计数器脚本
          cp ./chapters/res/patch/gitbook-plugin-pageview-count/plugin.js  _book/gitbook/gitbook-plugin-pageview-count
          # sudo chmod -R 777 _book/gitbook/gitbook-plugin-pageview-count
          echo 更新计数器脚本完成
          echo 'loadlive2d("model_1", `https://cdn.jsdelivr.net/gh/zztongtong/moc-models@5.0/an94_2404/destroy/model.json`, null);' >> _book/gitbook/gitbook.js
          echo 添加模型js脚本到gitbook.js完成
          cat chapters/res/patch/gitbook/gitbook.js >> _book/gitbook/gitbook.js
          echo 添加鼠标点击js脚本完成

      - name: Deploy #步骤4：把编译好的静态目录上传到gh-pages分支上
        uses: JamesIves/github-pages-deploy-action@3.1.5 #这里调用第三方依赖，用于上传代码到指定分支上
        with:
          ACCESS_TOKEN: ${{ secrets.TOKEN }}
          BRANCH: gh-pages #github pages 默认的分支
          FOLDER: _book #上传文件的目录，我这个目录在根目录下，如果是子目录可以这么写  docs/.vuepress/dist

      - name: Create GitHub release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.TOKEN }}
          automatic_release_tag: 'ebook_index'
          title: ${{ env.ReleaseVersion }}
          prerelease: false
          files: |
            _ebook/*

      #- name: synchronize to gitee # 自动同步github到gitee，ssh-keygen生成公钥和秘钥，公钥添加到github和gitee，秘钥配置到项目secrets.GITEE_PRIVATE_KEY里，gitee生成的token添加到secrets.GITEE_TOKEN里
      #  uses: Yikun/hub-mirror-action@master # 代表我们用的仓库，不用同步
      #  with:
      #    # 必选，需要同步的Github用户（源）
      #    src: github/narutohyc
      #    # 必选，需要同步到的Gitee的用户（目的）
      #    dst: gitee/narutohyc
      #    # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys
      #    dst_key: ${{ secrets.GITEE_PRIVATE_KEY }}
      #    # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens
      #    dst_token:  ${{ secrets.GITEE_TOKEN }}
      #    # 如果是组织，指定组织即可，默认为用户user
      #    # account_type: org
      #    # 还有黑、白名单，静态名单机制，可以用于更新某些指定库
      #    # static_list: repo_name
      #    # black_list: 'repo_name,repo_name2'
      #    # white_list: 'repo_name,repo_name2'
        # uses: wearerequired/git-mirror-action@master
        # env:
        #   SSH_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}
        # with:
        #   source-repo: "git@github.com:hycBook/bk_index.git"
        #   destination-repo: "git@gitee.com:hycBook/bk_index.git"

      # Runs a single command using the runners shell
      - name: print_infos
        run: echo build sucessful!
  
